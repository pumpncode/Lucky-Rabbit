[manifest]
version = "1.0.0"
priority = 0


# --------- circus ---------

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/game_object.lua"]'
pattern = "if G.GAME.used_vouchers.v_omen_globe and pseudorandom('omen_globe') > 0.8 then"
position = "at"
payload = '''if G.GAME.used_vouchers.v_fmod_circus and pseudorandom("circus") > 0.8 then
    _card = {set = "Silly", area = G.pack_cards, skip_materialize = true, soulable = true, key_append = "sil1"}
elseif G.GAME.used_vouchers.v_omen_globe and pseudorandom('omen_globe') > 0.8 then'''
match_indent = true
times = 1

# -------- reroll superfluity --------

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''G.GAME.current_round.reroll_cost_increase = G.GAME.current_round.reroll_cost_increase or 0
    if not skip_increment then G.GAME.current_round.reroll_cost_increase = G.GAME.current_round.reroll_cost_increase + 1 end'''
position = "at"
payload = '''if G.GAME.used_vouchers.v_fmod_reroll_superfluity and G.GAME.round_scores.times_rerolled.amt % 2 == 0 then
    G.GAME.current_round.reroll_cost_increase = G.GAME.current_round.reroll_cost_increase or 0
else
    G.GAME.current_round.reroll_cost_increase = G.GAME.current_round.reroll_cost_increase or 0
    if not skip_increment then G.GAME.current_round.reroll_cost_increase = G.GAME.current_round.reroll_cost_increase + 1 end
end'''
match_indent = true
times = 1

# -------- juggler --------

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''used_vouchers = {},'''
position = "after"
payload = '''juggler_count = 0,'''
match_indent = true
times = 1

# -------- recursive deck --------

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''elseif not (G.GAME.used_jokers[v.key] and not pool_opts.allow_duplicates and not next(find_joker("Showman"))) and'''
position = "at"
payload = '''elseif not (G.GAME.used_jokers[v.key] and not pool_opts.allow_duplicates and not (next(find_joker("Showman")) or G.GAME.selected_back.effect.center.key == "b_fmod_recursive")) and'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''if (_type == v.type.key or _type == v.soul_set) and not (G.GAME.used_jokers[v.key] and not next(find_joker("Showman")) and not v.can_repeat_soul) and (not v.in_pool or (type(v.in_pool) ~= "function") or v:in_pool()) then'''
position = "at"
payload = '''if (_type == v.type.key or _type == v.soul_set) and not (G.GAME.used_jokers[v.key] and not (next(find_joker("Showman")) or G.GAME.selected_back.effect.center.key == "b_fmod_recursive") and not v.can_repeat_soul) and (not v.in_pool or (type(v.in_pool) ~= "function") or v:in_pool()) then'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''not (G.GAME.used_jokers['c_soul'] and not next(find_joker("Showman")))'''
position = "at"
payload = '''not (G.GAME.used_jokers['c_soul'] and not (next(find_joker("Showman")) or G.GAME.selected_back.effect.center.key == "b_fmod_recursive"))'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''not (G.GAME.used_jokers['c_black_hole'] and not next(find_joker("Showman")))'''
position = "at"
payload = '''not (G.GAME.used_jokers['c_black_hole'] and not (next(find_joker("Showman")) or G.GAME.selected_back.effect.center.key == "b_fmod_recursive"))'''
match_indent = true
times = 1

# -------- fennex deck ---------
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if add and not G.GAME.banned_keys[v.key] then "
position = "after"
match_indent = true
payload = '''
    if (G.GAME.selected_back_key or {}).key == 'b_fmod_fennex' and v.key:find('j_fmod_') then
      for i = 1, 2 do
        _pool[#_pool + 1] = v.key
        _pool_size = _pool_size + 1
      end
    end
'''

# -------- reaper deck ---------

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "local blind_amt = get_blind_amount(G.GAME.round_resets.blind_ante)*blind_choice.config.mult*G.GAME.starting_params.ante_scaling"
position = "at"
match_indent = true
payload = '''
local blind_amt = 0
if G.GAME.selected_back.effect.center.key == "b_fmod_reaper" and blind_choice.config.boss and G.GAME.reaper_set then
    local temp_mult = blind_choice.config.mult * 2
    G.GAME.reaper_set = false
    blind_amt = get_blind_amount(G.GAME.round_resets.blind_ante)*temp_mult*G.GAME.starting_params.ante_scaling
else
    blind_amt = get_blind_amount(G.GAME.round_resets.blind_ante)*blind_choice.config.mult*G.GAME.starting_params.ante_scaling
end
'''

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''juggler_count = 0,'''
position = "after"
payload = '''reaper_set = false,'''
match_indent = true
times = 1

# -------- trapeze --------

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''reaper_set = false,'''
position = "after"
payload = '''trapeze_count = 0,'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''local card = Card(area.T.x + area.T.w/2, area.T.y, G.CARD_W, G.CARD_H, front, center,'''
position = "before"
payload = '''if center.key == 'c_fmod_trapeze' and G.GAME.trapeze_count >= 5 then
    center = G.P_CENTERS[pseudorandom_element({"c_soul", "c_fmod_soully"}, pseudoseed("trapeze"))]
    G.GAME.trapeze_count = 0
end'''
match_indent = true
times = 1

# -------- saffron shield blind --------

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "most_played_poker_hand = 'High Card',"
position = "after"
payload = "most_played_rank = 'Ace',"
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.GAME.current_round.most_played_poker_hand = _handname"
position = "after"
payload = '''local _rankname, played = 'Ace', -1
            for k, v in pairs(G.GAME.cards_played) do
                if G.GAME.cards_played[k].total > played then
                    played = G.GAME.cards_played[k].total
                    _rankname = k
                end
            end
        G.GAME.current_round.most_played_rank = _rankname'''
match_indent = true
times = 1

# -------- marking badges --------

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "badges.mod_set = nil"
position = "before"
match_indent = true
payload = '''
if FMOD and card and card.ability then
    local key = FMOD.has_marking(card)
    if key then
        SMODS.create_mod_badges(SMODS.Stickers[key], badges)
    end
end
'''

# -------- ink marking --------

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''function Blind:stay_flipped(area, card, from_area)
    if not self.disabled then'''
position = "at"
payload = '''function Blind:stay_flipped(area, card, from_area)
    if not self.disabled and not (FMOD.has_marking(card) == 'fmod_ink_mark') then'''
match_indent = true
times = 1

# -------- pinhole marking --------

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''for k, v in ipairs(G.play.cards) do
        if (not v.shattered) and (not v.destroyed) then 
            draw_card(G.play,G.discard, it*100/play_count,'down', false, v)
            it = it + 1
        end
    end'''
position = "at"
payload = '''for k, v in ipairs(G.play.cards) do
    if not (v.shattered) and (not v.destroyed) then
        if FMOD.has_marking(v) == "fmod_pinhole_mark" then
            draw_card(G.play, G.deck, it*100/play_count, 'down', nil, v, 0.005, false, nil, math.max((21-k)/20,0.7))
            it = it + 1
        else
            draw_card(G.play,G.discard, it*100/play_count,'down', false, v)
            it = it + 1
        end
    end
end'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if card then drawn = true end
local stay_flipped = G.GAME and G.GAME.blind and G.GAME.blind:stay_flipped(to, card, from)
if G.GAME.modifiers.flipped_cards and to == G.hand then
    if pseudorandom(pseudoseed('flipped_card')) < 1/G.GAME.modifiers.flipped_cards then
        stay_flipped = true
    end
end
to:emplace(card, nil, stay_flipped)'''
position = "at"
payload = '''if card and not (FMOD.has_marking(card) == "fmod_pinhole_mark") then drawn = true end
local stay_flipped = G.GAME and G.GAME.blind and G.GAME.blind:stay_flipped(to, card, from)
if G.GAME.modifiers.flipped_cards and to == G.hand then
    if pseudorandom(pseudoseed('flipped_card')) < 1/G.GAME.modifiers.flipped_cards then
        stay_flipped = true
    end
end
if to == G.deck and #G.deck.cards > 0 and FMOD.has_marking(card) == "fmod_pinhole_mark" then
    local poss_deck = {}
    for k, v in ipairs(G.deck.cards) do
        poss_deck[#poss_deck+1] = k
    end
    local rand_card = pseudorandom_element(poss_deck, pseudoseed("pinhole"))
    table.insert(G.deck.cards, rand_card, card)
    card:set_card_area(to)
    play_sound('card1', 0.85 + percent*0.2/100, 0.6*(vol or 1))
    to:set_ranks()
    to:align_cards()
else
    to:emplace(card, nil, stay_flipped)
end'''
match_indent = true
times = 1

# -------- hyperfixation --------

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''trapeze_count = 0,'''
position = "after"
payload = '''hyperfix_card = {
    rank = 'Ace',
    suit = 'Spades',
    id = 14,
},'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''reset_idol_card()'''
position = "after"
payload = '''FMOD.reset_hyperfix_rank()
G.GAME.hyperfix_card.rank, G.GAME.hyperfix_card.id = FMOD.reset_hyperfix_full_card("rank")
G.GAME.hyperfix_card.suit = FMOD.reset_hyperfix_full_card("suit")
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''reset_idol_card()'''
position = "after"
payload = '''FMOD.reset_hyperfix_rank()
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''idol_card = {suit = 'Spades', rank = 'Ace'},'''
position = "after"
payload = '''hyperfix_card = {rank = 'Ace', id = 14},
'''
match_indent = true
times = 1